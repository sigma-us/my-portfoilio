AWSTemplateFormatVersion: "2010-09-09"
Description: "Provisioning resources to be used for portfolio.kconley.com"
Parameters:
  BucketName:
    Type: String
    Default: portfolio.kconley.com
    Description: S3 Bucket Name
  DomainBase:
    Type: String
    Default: kconley.com
    Description: Base domain for stack
  DomainPrefix:
    Type: String
    Default: portfolio
    Description: Prefix to host specific website on domain
  GitHubRepoCloneLink:
    Type: String
    NoEcho: true
    Default: https://github.com/sigma-us/my-portfoilio.git
    Description: GitHub Clone Url for codebuild project
  GitHubUserName:
    Type: String
    NoEcho: true
    Default: sigma-us
    Description: Account username for github repo
  GitHubToken:
    Type: String
    NoEcho: true
    Description: Personal token from github to allow codebuild access to github (use secrets manager per aws recommendation)
  LambdaCodeBucket:
    Type: String
    Default: kyle-lambda-code
    Description: Globally used bucket for lambda code
  SNSEndpoint:
    Type: String
    Description: The phone number to be used for notifying of build completion

Resources:
  FrontEndBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  FrontEndBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontEndBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::${BucketName}/*"
            Principal: "*"
            Condition:
              StringLike:
                aws:Referer:
                  - "*.kconley.com/*"

  # # Route53 Cloudfront Certificate resources

  #   PortfolioHostedZone:
  #     Type: AWS::Route53::HostedZone
  #     Properties:
  #       Name: !Sub '${DomainPrefix}.${DomainName}'

  #   PortfolioRecordSet:
  #     Type: AWS::Route53::RecordSet
  #     Properties:
  #       Name: !Ref DomainPrefix
  #       Type: A
  #       AliasTarget: !GetAtt PortfolioDistribution.DomainName

  #   PortfolioDistribution:
  #     Type: AWS::CloudFront::Distribution
  #     Properties:
  #       DistributionConfig:
  #         Origins:
  #           DomainName: !Sub ${DomainPrefix}.${DomainName}.s3.amazonaws.com
  #           S3OriginConfig:
  #             OriginAccessIdentity:
  #           Id: !Sub S3-${DomainPrefix}.${DomainName}
  #         DefaultCacheBehavior:
  #           TargetOriginId: !Sub S3-${DomainPrefix}.${DomainName}
  #           ViewerProtocolPolicy: redirect-to-https
  #           DefaultTTL: 60
  #         DefaultRootObject: index.html
  #         ViewerCertificate:
  #           SslSupportMethod: sni-only

  # # Looks lik stack creation will pause on the certificate until you go and update
  # # route 53 with the CNAME record set for DNS validation
  #   DomainCertificate:
  #     Type: AWS::CertificateManager::Certificate
  #     Properties:
  #       DomainName: !Sub '*.${DomainName}'
  #       DomainValidationOptions:
  #         - DomainName: !Sub '*.${DomainName}'
  #           ValidationDomain: !Ref DomainName
  #       ValidationMethod: DNS

  # might skip the DNS stuff since it should really never change once we are up and running

  PortfolioCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${DomainPrefix}_build
      ServiceRole: !GetAtt StackRole.Arn
      Artifacts:
        Packaging: ZIP
        Location: !Ref CodeBuildBucket
        Type: S3
        Name: !Sub ${DomainPrefix}build.zip
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
      Source:
        Location: !Ref GitHubRepoCloneLink
        Type: GITHUB
        Auth:
          Resource: !Ref GitHubAuthInfo
          Type: OAUTH

  GitHubAuthInfo:
    Type: AWS::CodeBuild::SourceCredential
    Properties:
      ServerType: GITHUB
      Token: !Ref GitHubToken
      AuthType: PERSONAL_ACCESS_TOKEN

  CodeBuildBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub build-${BucketName}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  CodeBuildBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CodeBuildBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:*"
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::build-${BucketName}/*"
            Principal: "*"

  CodeBuildLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}_code-build"
      Description: Unzips and uploads front end files to portfolio bucket
      Handler: !Ref AWS::StackName
      Role: !GetAtt
        - StackRole
        - Arn
      Environment:
        Variables:
          BUILD_BUCKET: !Ref CodeBuildBucket
          PORTFOLIO_BUCKET: !Ref FrontEndBucket
      MemorySize: 128
      Timeout: 30
      Runtime: go1.x
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Sub "${AWS::StackName}.zip"

  CodeBuildLambdaDestination:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref CodeBuildLambda
      Qualifier: $LATEST
      DestinationConfig:
        OnSuccess:
          Destination: !Ref DeployPortfolioTopic
        OnFailure:
          Destination: !Ref DeployPortfolioTopic

  DeployPortfolioTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${AWS::StackName}-deploy
      TopicName: !Sub ${AWS::StackName}-deploy

  DeployPortfolioSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref DeployPortfolioTopic
      Endpoint: !Ref SNSEndpoint

  # WIP
  PortfolioPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${AWS::StackName}-pipeline
      RoleArn: !GetAtt StackRole.Arn
      ArtifactStore:
        Location: !Ref CodeBuildBucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              RunOrder: 1
              OutputArtifacts: 
                - Name: !Ref AWS::StackName
              Configuration:
                Owner: !Ref GitHubUserName
                Repo: !Ref AWS::StackName
                PollForSourceChanges: 'false'
                Branch: master
                OAuthToken: !Ref GitHubToken
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
        - Name: Build
          Actions:
            - Name: Build
              RunOrder: 2
              InputArtifacts: 
                - Name: !Ref AWS::StackName
              OutputArtifacts: 
                - Name: !Sub ${AWS::StackName}-build
              Configuration:
                ProjectName: !Ref PortfolioCodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
        - Name: Invoke
          Actions:
            - Name: Invoke
              RunOrder: 3
              InputArtifacts: 
                - Name: !Sub ${AWS::StackName}-build
              Configuration:
                FunctionName: !Ref CodeBuildLambda
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: 1


  PortfolioPipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Name: !Sub ${AWS::StackName}_pipeline-webhook
      Filters:
        - JsonPath: $.ref
      Authentication: GITHUB_HMAC
      TargetPipeline: !Ref PortfolioPipeline
      TargetAction: Source
      TargetPipelineVersion: 1
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubToken

  # WIP
  StackRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub stack_${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
                - lambda.amazonaws.com
                - codepipeline.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: !Sub "stack_${AWS::StackName}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Resource:
                  - !Sub "arn:aws:s3:::build-${BucketName}/*"
                  - !Sub "arn:aws:s3:::${BucketName}/*"
                  - !Sub "arn:aws:s3:::${LambdaCodeBucket}/*"
                Action:
                  - "s3:*"
              - Effect: Allow
                Resource: "arn:aws:logs:*:*:*"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
              - Effect: Allow
                Resource: !Ref DeployPortfolioTopic
                Action:
                  - "sns:Publish"
              - Effect: Allow
                Resource: "arn:aws:codebuild:*"
                Action: 
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
              - Effect: Allow
                Resource: "arn:aws:lambda:*:*:*"
                Action: "lambda:*"
              - Effect: Allow
                Resource: "*"
                Action: "codepipeline:PutJobSuccessResult"
